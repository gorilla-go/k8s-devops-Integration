{{ $namespace := include "namespace" . }}
{{ $projectName := include "projectName" . }}
{{ $productionMode := .Values.global.mode }}

{{- if .Values.global.dockerRegistry.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.secret: docker-registry-secret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ dict "auths" (dict .Values.global.dockerRegistry.host (dict "username" .Values.global.dockerRegistry.secrets.username "password" .Values.global.dockerRegistry.secrets.password "email" .Values.global.dockerRegistry.secrets.email "auth" (nospace (cat .Values.global.dockerRegistry.secrets.username ":" .Values.global.dockerRegistry.secrets.password) | b64enc))) | toJson | b64enc }}
---
{{- end }}


{{- range $appName, $appConfig := .Values.apps.php }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    com.{{ $projectName }}.deployment: {{ $appName }}
  name: {{ $appName }}
  namespace: {{ $namespace }}
spec:
  replicas: {{ default 1 $appConfig.replicas }}
  selector:
    matchLabels:
      com.{{ $projectName }}.pod: {{ $appName }}
  strategy:
    {{- toYaml $appConfig.strategy | nindent 4 }}
  template:
    metadata:
      labels:
        com.{{ $projectName }}.pod: {{ $appName }}
    spec:
      {{- if $appConfig.imagePullSecrets.enabled }}
      imagePullSecrets:
        - name: docker-registry-secret
      {{- end }}
      containers:
        - image: {{ $appConfig.image }}
          imagePullPolicy: {{ default "IfNotPresent" $appConfig.imagePullPolicy }}
          name: php-{{ $appName }}
          resources:
            {{- toYaml $appConfig.resources | nindent 12 }}
          env:
            - name: ENV_PRODUCTION
              value: {{ default "dev" $productionMode }}
          ports:
            - name: tcp-php
              containerPort: 9000
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            - name: sites
              mountPath: /sites

        {{- if $appConfig.monitor.enabled }}
        - name: php-fpm-exporter
          image: {{ $appConfig.monitor.exporter.image }}
          resources:
            {{- toYaml $appConfig.monitor.exporter.resources | nindent 12 }}
          env:
            {{- toYaml $appConfig.monitor.exporter.env | nindent 12 }}
        {{- end }}

      restartPolicy: {{ $appConfig.restartPolicy }}
      volumes:
        - name: sites
          persistentVolumeClaim:
            claimName: {{ $appConfig.mountSitesProviderName }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ $appName }}
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.service: {{ $appName }}
spec:
  ports:
    - name: tcp-php
      port: 9000
      targetPort: 9000
    {{- if $appConfig.monitor.enabled }}
    - name: http-exporter
      port: {{ $appConfig.monitor.exporter.port }}
      targetPort: {{ $appConfig.monitor.exporter.port }}
    {{- end }}
  selector:
    com.{{ $projectName }}.pod: {{ $appName }}
  type: ClusterIP

---
{{- if $appConfig.monitor.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ $appName }}
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.monitor: {{ $appName }}
spec:
  jobLabel: {{ $appName }}
  namespaceSelector:
    matchNames:
      - {{ $namespace }}
  selector:
    matchLabels:
      com.{{ $projectName }}.service: {{ $appName }}
  endpoints:
    - port: http-exporter
{{- end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $appName }}-nginx-params
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.configmap: {{ $appName }}
data:
  {{- if not (empty $appConfig.scriptFile) }}
  SCRIPT_FILENAME: {{ $appConfig.scriptFile | quote }}
  {{- end }}

---
{{- if $appConfig.basicAuth.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $appName }}-nginx-auth
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.secret: {{ $appName }}
type: Opaque
data:
  auth: {{ htpasswd $appConfig.basicAuth.username $appConfig.basicAuth.password | b64enc }}
{{- end }}

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $appName }}
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.ingress: {{ $appName }}
  annotations:
    nginx.ingress.kubernetes.io/ingress-class: {{ $appConfig.ingressClassName }}
    nginx.ingress.kubernetes.io/backend-protocol: "FCGI"
    nginx.ingress.kubernetes.io/fastcgi-index: "index.php"
    nginx.ingress.kubernetes.io/proxy-body-size: {{ $appConfig.bodyLimit | quote }}
    nginx.ingress.kubernetes.io/fastcgi-params-configmap: "{{ $appName }}-nginx-params"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
    {{- if $appConfig.basicAuth.enabled }}
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: {{ $appName }}-nginx-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
    {{- end }}
    {{- if not (empty $appConfig.serverSnippet) }}
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {{- $appConfig.serverSnippet | nindent 6 }}
    {{- end }}
spec:
  ingressClassName: {{ $appConfig.ingressClassName }}
  rules:
    {{- range $i, $hostname := $appConfig.hostnames }}
    - host: {{ $hostname | quote }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: {{ $appName }}
                port:
                  number: 9000
    {{- end }}
{{- end }}