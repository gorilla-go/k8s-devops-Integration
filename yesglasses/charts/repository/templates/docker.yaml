{{- if .Values.docker.enable }}
{{- $projectName := include "projectName" . -}}
{{- $namespace := include "namespace" . -}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docker-registry-data
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.pvc: docker-registry-data
spec:
  storageClassName: {{ .Values.docker.storageClassName }}
  accessModes:
    - {{ .Values.docker.accessMode }}
  resources:
    requests:
      storage: {{ .Values.docker.capacity }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  docker-registry
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.deployment: docker-registry
spec:
  selector:
    matchLabels:
      com.{{ $projectName }}.pod: docker-registry
  replicas: 1
  template:
    metadata:
      labels:
        com.{{ $projectName }}.pod: docker-registry
    spec:
      containers:
      - name: docker-registry
        image: {{ .Values.docker.image }}
        resources:
          requests:
            cpu: 50m
            memory: 50Mi
          limits:
            cpu: 100m
            memory: 200Mi
        readinessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 10
        ports:
          - containerPort: 5000
            name: tcp-registry
        volumeMounts:
          - name: docker-registry-data
            mountPath: /var/lib/registry
          - name: docker-config
            mountPath: /etc/docker/registry/config.yml
            subPath: config.yml
            readOnly: true
          - name: docker-secret
            mountPath: /auth/htpasswd
            subPath: htpasswd
            readOnly: true
      volumes:
      - name: docker-config
        configMap:
          name: docker-config
      - name: docker-secret
        secret:
          secretName: docker-auth
      - name: docker-registry-data
        persistentVolumeClaim:
          claimName: docker-registry-data
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.service: docker-registry
spec:
  selector:
    com.{{ $projectName }}.pod: docker-registry
  ports:
    - port: 5000
      targetPort: 5000
      name: tcp-docker-registry

{{- if .Values.docker.ingress }}
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: docker-registry
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.ingress: docker-registry
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: {{ default "128M" .Values.docker.bodySize }}
spec:
  ingressClassName: {{ .Values.global.ingress.className }}
  rules:
    - host: {{ .Values.docker.host }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: docker-registry
                port:
                  number: 5000

{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-config
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.configmap: docker-config
data:
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
      delete:
        enabled: true
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
        Access-Control-Allow-Origin: ['*']
        Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS', 'DELETE']
        Access-Control-Allow-Headers: ['Authorization', 'Accept', 'Cache-Control']
        Access-Control-Max-Age: [1728000]
        Access-Control-Allow-Credentials: [true]
        Access-Control-Expose-Headers: ['Docker-Content-Digest']
    auth:
      htpasswd:
        path: /auth/htpasswd
        realm: "Registry Realm"
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-auth
  namespace: {{ $namespace }}
  labels:
    com.{{ $projectName }}.secret: docker-auth
stringData:
  htpasswd: |
    {{- range $k, $user := .Values.docker.users }}
    {{ htpasswd $user.username $user.password }}
    {{- end }}
{{- end }}
