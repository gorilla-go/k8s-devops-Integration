apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: docker-registry-data
  namespace: {{ .Release.Namespace }}
  labels:
    com.yesglasses.pvc: docker-registry-data
spec:
  storageClassName: {{ .Values.docker.storageClassName }}
  accessModes:
    - {{ .Values.docker.accessMode }}
  resources:
    requests:
      storage: {{ .Values.docker.capacity }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: {{ .Release.Namespace }}
  labels:
    com.yesglasses.deployment: docker-registry
spec:
  selector:
    matchLabels:
      com.yesglasses.pod: docker-registry
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        com.yesglasses.pod: docker-registry
    spec:
      containers:
        - name: docker-registry
          image: {{ .Values.docker.image }}
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 100m
              memory: 100Mi
          readinessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 5000
            initialDelaySeconds: 10
            periodSeconds: 10
          ports:
            - containerPort: 5000
              name: tcp-registry
          volumeMounts:
            - name: docker-registry-data
              mountPath: /var/lib/registry
            - name: docker-config
              mountPath: /etc/docker/registry/config.yml
              subPath: config.yml
              readOnly: true
            - name: docker-secret
              mountPath: /auth/htpasswd
              subPath: htpasswd
              readOnly: true
      volumes:
        - name: docker-config
          configMap:
            name: docker-config
        - name: docker-secret
          secret:
            secretName: docker-auth
        - name: docker-registry-data
          persistentVolumeClaim:
            claimName: docker-registry-data
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry
  namespace: {{ .Release.Namespace }}
  labels:
    com.yesglasses.service: docker-registry
spec:
  selector:
    com.yesglasses.pod: docker-registry
  ports:
    - port: 5000
      targetPort: 5000
      name: tcp-docker-registry

{{- if .Values.docker.ingress }}
---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: docker-registry
  namespace: {{ .Release.Namespace }}
  labels:
    com.yesglasses.ingress: docker-registry
  annotations:
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 2048M
spec:
  rules:
    - host: {{ .Values.docker.host }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: docker
                port:
                  number: 5000

{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: docker-config
  namespace: {{ .Release.Namespace }}
data:
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
      delete:
        enabled: true
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
        Access-Control-Allow-Origin: ['*']
        Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS', 'DELETE']
        Access-Control-Allow-Headers: ['Authorization', 'Accept', 'Cache-Control']
        Access-Control-Max-Age: [1728000]
        Access-Control-Allow-Credentials: [true]
        Access-Control-Expose-Headers: ['Docker-Content-Digest']
    auth:
      htpasswd:
        path: /auth/htpasswd
        realm: "Registry Realm"
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-auth
  namespace: {{ .Release.Namespace }}
stringData:
  htpasswd: |
    {{- range $k, $user := .Values.docker.users }}
    {{ htpasswd $user.username $user.password }}
    {{- end }}