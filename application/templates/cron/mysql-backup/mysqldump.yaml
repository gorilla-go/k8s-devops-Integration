{{- if .Values.cron.mysqlBackup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mysqldump
  namespace: {{ .Release.Namespace }}
spec:
  schedule: "0 0 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 0
  startingDeadlineSeconds: 30
  jobTemplate:
    spec:
      backoffLimit: 0
      ttlSecondsAfterFinished: 5
      template:
        spec:
          containers:
            - name: mysql-backup
              image: bukaka/mysql-client:{{ .Values.mysql.version }}
              imagePullPolicy: IfNotPresent
              env:
                - name: MYSQL_HOST
                  value: {{ .Values.mysql.name }}-{{ .Values.mysql.backupIndex }}.{{ .Values.mysql.name }}-instances
                - name: MYSQL_PORT
                  value: "3306"
              command:
                - /bin/sh
                - -c
                - |
                  # create dir.
                  if [ ! -d "/mysql-backup/mysqldump" ]; then
                    mkdir -p /mysql-backup/mysqldump
                  fi

                  # ping mysql
                  if ! mysqladmin -h $MYSQL_HOST -P $MYSQL_PORT ping; then
                    echo "mysql is not ready."
                    exit 1;
                  fi

                  # format data YmdHis
                  DATETIME=$(date +%Y%m%d%H%M%S);
                  mysqldump -h $MYSQL_HOST -P $MYSQL_PORT --set-gtid-purged=ON --single-transaction --all-databases > /mysql-backup/mysqldump/$DATETIME.sql

                  # delete the redundant backup files, leaving only the latest three. no xargs
                  if [ $(ls -1 /mysql-backup/mysqldump/ | wc -l) -gt 3 ]; then
                    ls -1tr /mysql-backup/mysqldump/ | head -n -3 | xargs -d '\n' rm -f --
                  fi

              volumeMounts:
                - name: mysql-backup
                  mountPath: /mysql-backup
                - name: mysql-secret
                  mountPath: /etc/my.cnf
                  subPath: rootMysqlConfig
                  readOnly: true

          restartPolicy: Never
          affinity:
            podAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: mysql.oracle.com/cluster
                        operator: In
                        values:
                          - "{{ .Values.mysql.name }}"
                      - key: statefulset.kubernetes.io/pod-name
                        operator: In
                        values:
                          - "{{ .Values.mysql.name }}-{{ .Values.mysql.backupIndex }}"
                  topologyKey: kubernetes.io/hostname
          volumes:
            - name: mysql-backup
              persistentVolumeClaim:
                claimName: mysql-backup
            - name: mysql-secret
              secret:
                secretName: {{ .Values.mysql.rootSecretName }}
{{- end }}